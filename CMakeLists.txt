CMAKE_MINIMUM_REQUIRED(VERSION 3.17)

SET(CMAKE_C_COMPILER "gcc")
SET(CMAKE_CXX_COMPILER "clang++")
PROJECT(CppCrystal
	VERSION 1.0
	LANGUAGES CXX
	)
ADD_COMPILE_OPTIONS(-Wall -Wpedantic -Wfatal-errors)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON )
SET(CMAKE_CXX_FLAGS "-O0")

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

SET( CMAKE_EXPORT_COMPILE_COMMANDS ON )
INCLUDE(FetchContent)

IF( EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json" )
  EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json
    ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json
  )
ENDIF()
SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

FIND_PACKAGE(Eigen3 REQUIRED)
LINK_DIRECTORIES(${Eigen_INCLUDE_DIRS})

ADD_LIBRARY(itertools INTERFACE)
TARGET_INCLUDE_DIRECTORIES(itertools INTERFACE
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/itertools>
	$<INSTALL_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/lib>)

FETCHCONTENT_DECLARE(
	Catch2
	GIT_REPOSITORY https://github.com/catchorg/Catch2.git
	GIT_TAG        v3.4.0
	)
FETCHCONTENT_MAKEAVAILABLE(Catch2)

ADD_EXECUTABLE(itertoolstests
	${PROJECT_SOURCE_DIR}/tests/itertools_test_enumerate.cpp
	${PROJECT_SOURCE_DIR}/tests/itertools_test_zip.cpp
	${PROJECT_SOURCE_DIR}/tests/testtools_test.cpp)
TARGET_LINK_LIBRARIES(itertoolstests PRIVATE itertools Catch2::Catch2WithMain)

ADD_LIBRARY(csvreader INTERFACE)
TARGET_INCLUDE_DIRECTORIES(csvreader INTERFACE
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/csvreader>
	$<INSTALL_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/lib>)

ADD_LIBRARY(spherical_harmonics STATIC
	${PROJECT_SOURCE_DIR}/src/spherical_harmonics.cpp)
TARGET_INCLUDE_DIRECTORIES(spherical_harmonics PRIVATE ${PROJECT_SOURCE_DIR}/include)

ADD_LIBRARY(elasticity STATIC
	${PROJECT_SOURCE_DIR}/src/elasticity.cpp)
TARGET_INCLUDE_DIRECTORIES(elasticity PRIVATE ${PROJECT_SOURCE_DIR}/include)

ADD_LIBRARY(symmetry_operations SHARED ${PROJECT_SOURCE_DIR}/src/symmetry_operations.cpp)
TARGET_INCLUDE_DIRECTORIES(symmetry_operations PUBLIC ${PROJECT_SOURCE_DIR}/include)
TARGET_LINK_LIBRARIES(symmetry_operations PUBLIC ${Eigen_LIBRARIES})

ADD_EXECUTABLE(crystal ${PROJECT_SOURCE_DIR}/src/lattice.cpp)
TARGET_INCLUDE_DIRECTORIES(crystal PUBLIC ${PROJECT_SOURCE_DIR}/include)
TARGET_LINK_LIBRARIES(crystal PUBLIC ${Eigen_LIBRARIES} symmetry_operations)
